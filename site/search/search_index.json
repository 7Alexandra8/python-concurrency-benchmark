{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1: \u0418\u0437\u043c\u0435\u0440\u0435\u043d\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0434\u043b\u044f async, process \u0438 thread \u0432\u044b\u0433\u043b\u044f\u0434\u0438\u0442 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c: Async: 0.0474 \u0441\u0435\u043a\u0443\u043d\u0434\u044b Process: 0.05213 \u0441\u0435\u043a\u0443\u043d\u0434\u044b Thread: 0.0492 \u0441\u0435\u043a\u0443\u043d\u0434\u044b \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u043f\u0440\u0438\u0447\u0438\u043d\u044b \u0434\u043b\u044f \u0442\u0430\u043a\u0438\u0445 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432: GIL (Global Interpreter Lock): Python \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 GIL, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0440\u0435\u0434\u043e\u0442\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u043f\u043e\u0442\u043e\u043a\u043e\u0432 Python \u043a\u043e\u0434\u0430 \u0432 \u043e\u0434\u043d\u043e\u043c \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0435. \u042d\u0442\u043e \u043c\u043e\u0436\u0435\u0442 \u0441\u043d\u0438\u0437\u0438\u0442\u044c \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u044c \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u0442\u043e\u0447\u043d\u044b\u0445 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432 \u0432 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0441\u043b\u0443\u0447\u0430\u044f\u0445. \u041e\u0434\u043d\u0430\u043a\u043e \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434 \u043d\u0435 \u0441\u0442\u0440\u0430\u0434\u0430\u0435\u0442 \u043e\u0442 \u044d\u0442\u043e\u0433\u043e, \u0442\u0430\u043a \u043a\u0430\u043a \u043e\u043d \u043d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u043f\u043e\u0442\u043e\u043a\u0438 Python. \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432: \u041f\u043e\u0434\u0445\u043e\u0434 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c multiprocessing (process) \u0441\u043e\u0437\u0434\u0430\u0435\u0442 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u044b, \u0447\u0442\u043e \u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u0431\u043e\u043b\u044c\u0448\u0435 \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0438 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432. \u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0440\u0435\u0441\u0443\u0440\u0441\u0430\u043c\u0438: \u0412 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u0442\u043e\u0447\u043d\u043e\u043c \u043f\u043e\u0434\u0445\u043e\u0434\u0435 (thread) \u0441\u043e\u0437\u0434\u0430\u0435\u0442\u0441\u044f \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u0442\u043e\u043a\u043e\u0432, \u043d\u043e \u043e\u043d\u0438 \u0440\u0430\u0437\u0434\u0435\u043b\u044f\u044e\u0442 \u043e\u0434\u0438\u043d \u0438 \u0442\u043e\u0442 \u0436\u0435 \u0440\u0435\u0441\u0443\u0440\u0441 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430, \u0447\u0442\u043e \u043c\u043e\u0436\u0435\u0442 \u043f\u043e\u0432\u043b\u0435\u0447\u044c \u0437\u0430 \u0441\u043e\u0431\u043e\u0439 \u043c\u0435\u043d\u044c\u0448\u0438\u0435 \u043d\u0430\u043a\u043b\u0430\u0434\u043d\u044b\u0435 \u0440\u0430\u0441\u0445\u043e\u0434\u044b \u043f\u043e \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044e \u0441 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435\u043c \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432. \u0417\u0430\u0434\u0430\u043d\u0438\u0435 2: \u0414\u0430\u043b\u0435\u0435 \u0431\u0443\u0434\u0435\u0442 3 \u0441\u043a\u0440\u0438\u043f\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0442 \u0441\u043e\u0431\u043e\u0439 \u0441\u043a\u0440\u0438\u043f\u0442\u044b \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u043f\u0443\u0442\u0435\u0448\u0435\u0441\u0442\u0432\u0438\u044f\u0445 \u0441 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0441\u0430\u0439\u0442\u043e\u0432 \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445. \u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u043e\u0432 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u0447\u0435\u0442\u044b\u0440\u0435 \u0440\u0430\u0437\u043d\u044b\u0445 URL-\u0430\u0434\u0440\u0435\u0441\u0430, \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0442\u0443\u0440\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u043c\u0435\u0440\u043e\u043f\u0440\u0438\u044f\u0442\u0438\u044f\u0445. async.py: import asyncio import aiohttp from bs4 import BeautifulSoup from sqlalchemy import create_engine, Column, Integer, String, DateTime, JSON from sqlalchemy.orm import sessionmaker from database import Trip, SessionLocal import time from datetime import datetime import re import json async def parse_and_save(url): start_time = time.time() async with aiohttp.ClientSession() as session: async with session.get(url) as response: html = await response.text() soup = BeautifulSoup(html, \"html.parser\") title = soup.title.string departure_location_element = soup.find(\"div\", class_=\"tags\") departure_location = departure_location_element.find(\"a\", class_=\"tag has-icon-location\").text.strip() if departure_location_element else \"Unknown\" date_option = soup.select_one(\"option[selected='selected']\") if date_option: date_text = date_option.text.strip() if \" \u2014 \" in date_text and \" \" in date_text: start_day, end_month_year = date_text.split(\" \u2014 \", maxsplit=1) end_day, month_year = end_month_year.split(\" \", maxsplit=1) month_name, year = month_year.rsplit(maxsplit=1) months = { \"\u044f\u043d\u0432\u0430\u0440\u044f\": 1, \"\u0444\u0435\u0432\u0440\u0430\u043b\u044f\": 2, \"\u043c\u0430\u0440\u0442\u0430\": 3, \"\u0430\u043f\u0440\u0435\u043b\u044f\": 4, \"\u043c\u0430\u044f\": 5, \"\u0438\u044e\u043d\u044f\": 6, \"\u0438\u044e\u043b\u044f\": 7, \"\u0430\u0432\u0433\u0443\u0441\u0442\u0430\": 8, \"\u0441\u0435\u043d\u0442\u044f\u0431\u0440\u044f\": 9, \"\u043e\u043a\u0442\u044f\u0431\u0440\u044f\": 10, \"\u043d\u043e\u044f\": 11, \"\u0434\u0435\u043a\": 12 } month = months.get(month_name.lower()) start_date_str = f\"{start_day} \u2014 {month} {year}\" end_date_str = f\"{end_day} {month} {year}\" start_date = datetime.strptime(start_date_str, \"%d \u2014 %m %Y\") end_date = datetime.strptime(end_date_str, \"%d %m %Y\") else: print(\"Date format not as expected.\") start_date, end_date = None, None else: start_date, end_date = None, None duration_element = soup.select_one(\"p.heading:-soup-contains('\u0414\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c') + p.title i.icon-duration\") duration_text = duration_element.find_next_sibling(string=True).strip() if duration_element else None duration = int(duration_text) if duration_text and duration_text.isdigit() else None details_block = soup.find(\"div\", class_=\"block mt-6\") details = details_block.find(\"div\").text.strip() if details_block else None print(f\"Title of {url}: {title}\") # \u041f\u0430\u0440\u0441\u0438\u043d\u0433 \u043f\u043e \u0441\u043b\u043e\u0432\u0430\u043c word_count = {} if details: words = re.findall(r'\\w+', details.lower()) for word in words: if word in word_count: word_count[word] += 1 else: word_count[word] = 1 print(\"Word count:\", word_count) db = SessionLocal() db.add(Trip(title=title, departure_location=departure_location, start_date=start_date, end_date=end_date, duration=duration, details=json.dumps(word_count))) # \u0421\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u043c \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 JSON db.commit() db.close() end_time = time.time() execution_time = end_time - start_time print(f\"Execution time for {url}: {execution_time} seconds\") async def main(): urls = [ \"https://turclub-pik.ru/pohod/yaponiya-v-sezon-cveteniya-sakury/\", \"https://www.trip.com/travel-guide/attraction/tokyo/warner-bros-studio-tour-tokyo-the-making-of-harry-potter-136452473/?locale=en-XX&curr=USD\", \"https://turclub-pik.ru/pohod/elbrus-s-yuga-s-komfortom-s-otelem/#trip-4253\", ] tasks = [] for url in urls: task = parse_and_save(url) tasks.append(task) await asyncio.gather(*tasks) if __name__ == \"__main__\": start_time = time.time() asyncio.run(main()) end_time = time.time() total_execution_time = end_time - start_time print(f\"\u041e\u0431\u0449\u0435\u0435 \u0432\u0440\u0435\u043c\u044f: {total_execution_time} \u0441\u0435\u043a\u0443\u043d\u0434\") process.py: import multiprocessing import requests from bs4 import BeautifulSoup from sqlalchemy import create_engine, Column, Integer, String, DateTime, JSON from sqlalchemy.orm import sessionmaker from database import Trip, SessionLocal import time from datetime import datetime import re import json def parse_and_save(url): start_time = time.time() response = requests.get(url) soup = BeautifulSoup(response.content, \"html.parser\") title = soup.title.string departure_location_element = soup.find(\"div\", class_=\"tags\") departure_location = departure_location_element.find(\"a\", class_=\"tag has-icon-location\").text.strip() if departure_location_element else \"Unknown\" date_option = soup.select_one(\"option[selected='selected']\") if date_option: date_text = date_option.text.strip() if \" \u2014 \" in date_text and \" \" in date_text: start_day, end_month_year = date_text.split(\" \u2014 \", maxsplit=1) end_day, month_year = end_month_year.split(\" \", maxsplit=1) month_name, year = month_year.rsplit(maxsplit=1) months = { \"\u044f\u043d\u0432\u0430\u0440\u044f\": 1, \"\u0444\u0435\u0432\u0440\u0430\u043b\u044f\": 2, \"\u043c\u0430\u0440\u0442\u0430\": 3, \"\u0430\u043f\u0440\u0435\u043b\u044f\": 4, \"\u043c\u0430\u044f\": 5, \"\u0438\u044e\u043d\u044f\": 6, \"\u0438\u044e\u043b\u044f\": 7, \"\u0430\u0432\u0433\u0443\u0441\u0442\u0430\": 8, \"\u0441\u0435\u043d\u0442\u044f\u0431\u0440\u044f\": 9, \"\u043e\u043a\u0442\u044f\u0431\u0440\u044f\": 10, \"\u043d\u043e\u044f\u0431\u0440\u044f\": 11, \"\u0434\u0435\u043a\u0430\u0431\u0440\u044f\": 12 } month = months.get(month_name.lower()) start_date_str = f\"{start_day} \u2014 {month} {year}\" end_date_str = f\"{end_day} {month} {year}\" start_date = datetime.strptime(start_date_str, \"%d \u2014 %m %Y\") end_date = datetime.strptime(end_date_str, \"%d %m %Y\") else: print(\"Date format not as expected.\") start_date, end_date = None, None else: start_date, end_date = None, None duration_element = soup.select_one(\"p.heading:-soup-contains('\u0414\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c') + p.title i.icon-duration\") duration_text = duration_element.find_next_sibling(text=True).strip() if duration_element else None duration = int(duration_text) if duration_text and duration_text.isdigit() else None details_block = soup.find(\"div\", class_=\"block mt-6\") details = details_block.find(\"div\").text.strip() if details_block else None print(f\"Title of {url}: {title}\") # Parsing by words word_count = {} if details: words = re.findall(r'\\w+', details.lower()) for word in words: if word in word_count: word_count[word] += 1 else: word_count[word] = 1 print(\"Word count:\", word_count) db = SessionLocal() db.add(Trip(title=title, departure_location=departure_location, start_date=start_date, end_date=end_date, duration=duration, details=json.dumps(word_count))) # Saving in JSON format db.commit() db.close() end_time = time.time() execution_time = end_time - start_time print(f\"Execution time for {url}: {execution_time} seconds\") if name == \" main \": urls = [ \"https://turclub-pik.ru/pohod/yaponiya-v-sezon-cveteniya-sakury/\", \"https://www.trip.com/travel-guide/attraction/tokyo/warner-bros-studio-tour-tokyo-the-making-of-harry-potter-136452473/?locale=en-XX&curr=USD\", \"https://turclub-pik.ru/pohod/elbrus-s-yuga-s-komfortom-s-otelem/#trip-4253\", \"https://www.tsarvisit.com/ru/visit/zimnie-katanija-na-sobach-ih-uprjazhkah-s-posescheniem-fermy-i-tradicionnym-obedom-671\" ] start_time = time.time() processes = [] for url in urls: process = multiprocessing.Process(target=parse_and_save, args=(url,)) processes.append(process) process.start() for process in processes: process.join() end_time = time.time() total_execution_time = end_time - start_time print(f\"Total execution time: {total_execution_time} seconds\") thread.py: import json import re import threading import requests from bs4 import BeautifulSoup from sqlalchemy import create_engine, Column, Integer, String, DateTime from sqlalchemy.orm import sessionmaker from database import Trip, SessionLocal import time from datetime import datetime def parse_and_save(url): start_time = time.time() response = requests.get(url) soup = BeautifulSoup(response.content, \"html.parser\") title = soup.title.string departure_location_element = soup.find(\"div\", class_=\"tags\") if departure_location_element: departure_location_element = departure_location_element.find(\"a\", class_=\"tag has-icon-location\") departure_location = departure_location_element.text.strip() if departure_location_element else \"Unknown\" date_option = soup.select_one(\"option[selected='selected']\") if date_option: date_text = date_option.text.strip() if \" \u2014 \" in date_text and \" \" in date_text: start_day, end_month_year = date_text.split(\" \u2014 \", maxsplit=1) end_day, month_year = end_month_year.split(\" \", maxsplit=1) month_name, year = month_year.rsplit(maxsplit=1) months = { \"\u044f\u043d\u0432\u0430\u0440\u044f\": 1, \"\u0444\u0435\u0432\u0440\u0430\u043b\u044f\": 2, \"\u043c\u0430\u0440\u0442\u0430\": 3, \"\u0430\u043f\u0440\u0435\u043b\u044f\": 4, \"\u043c\u0430\u044f\": 5, \"\u0438\u044e\u043d\u044f\": 6, \"\u0438\u044e\u043b\u044f\": 7, \"\u0430\u0432\u0433\u0443\u0441\u0442\u0430\": 8, \"\u0441\u0435\u043d\u0442\u044f\u0431\u0440\u044f\": 9, \"\u043e\u043a\u0442\u044f\u0431\u0440\u044f\": 10, \"\u043d\u043e\u044f\u0431\u0440\u044f\": 11, \"\u0434\u0435\u043a\u0430\u0431\u0440\u044f\": 12 } month = months.get(month_name, None) if month: start_date_str = f\"{start_day} \u2014 {month} {year}\" end_date_str = f\"{end_day} {month} {year}\" start_date = datetime.strptime(start_date_str, \"%d \u2014 %m %Y\") end_date = datetime.strptime(end_date_str, \"%d %m %Y\") else: print(\"Invalid month name:\", month_name) start_date, end_date = None, None else: print(\"Date format not as expected.\") start_date, end_date = None, None else: start_date, end_date = None, None duration_element = soup.select_one(\"p.heading:-soup-contains('\u0414\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c') + p.title i.icon-duration\") duration_text = duration_element.find_next_sibling(text=True).strip() if duration_element else None duration = int(duration_text) if duration_text and duration_text.isdigit() else None details_block = soup.find(\"div\", class_=\"block mt-6\") details = details_block.find(\"div\").text.strip() if details_block else None print(f\"Title of {url}: {title}\") # Word count parsing word_count = {} if details: words = re.findall(r'\\w+', details.lower()) for word in words: if word in word_count: word_count[word] += 1 else: word_count[word] = 1 print(\"Word count:\", word_count) db = SessionLocal() db.add(Trip(title=title, departure_location=departure_location, start_date=start_date, end_date=end_date, duration=duration, details=json.dumps(word_count))) db.commit() db.close() end_time = time.time() execution_time = end_time - start_time print(f\"Execution time for {url}: {execution_time} seconds\") urls = [\"https://turclub-pik.ru/pohod/yaponiya-v-sezon-cveteniya-sakury/\", \"https://www.trip.com/travel-guide/attraction/tokyo/warner-bros-studio-tour-tokyo-the-making-of-harry-potter-136452473/?locale=en-XX&curr=USD\", \"https://turclub-pik.ru/pohod/elbrus-s-yuga-s-komfortom-s-otelem/#trip-4253\", \"https://www.tsarvisit.com/ru/visit/zimnie-katanija-na-sobach-ih-uprjazhkah-s-posescheniem-fermy-i-tradicionnym-obedom-671\" ] start_time = time.time() threads = [] for url in urls: thread = threading.Thread(target=parse_and_save, args=(url,)) threads.append(thread) thread.start() for thread in threads: thread.join() end_time = time.time() total_execution_time = end_time - start_time print(f\"Total execution time for all threads: {total_execution_time} seconds\") \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u044b: Asyncio: \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0433\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u043a \u0432\u0435\u0431-\u0441\u0430\u0439\u0442\u0430\u043c \u0438 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445. \u041f\u043e\u0434\u0445\u043e\u0434 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u0435\u043d \u043f\u0440\u0438 \u0440\u0430\u0431\u043e\u0442\u0435 \u0441 I/O-\u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f\u043c\u0438, \u0442\u0430\u043a\u0438\u043c\u0438 \u043a\u0430\u043a \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043a \u0432\u0435\u0431-\u0441\u0435\u0440\u0432\u0435\u0440\u0430\u043c, \u043a\u043e\u0433\u0434\u0430 \u0437\u0430\u0434\u0435\u0440\u0436\u043a\u0438 \u0432\u043e\u0437\u043d\u0438\u043a\u0430\u044e\u0442 \u0438\u0437-\u0437\u0430 \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u044f \u043e\u0442\u0432\u0435\u0442\u0430. \u0412 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u044e\u0442\u0441\u044f \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0437\u0430\u0434\u0430\u0447, \u0447\u0442\u043e \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0441\u044d\u043a\u043e\u043d\u043e\u043c\u0438\u0442\u044c \u0432\u0440\u0435\u043c\u044f. \u0414\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 aiohttp. Multiprocessing: \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u0440\u0430\u0441\u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u0438\u0432\u0430\u043d\u0438\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432. \u041f\u043e\u0434\u0445\u043e\u0434 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u0435\u043d \u043f\u0440\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0438 CPU-\u0438\u043d\u0442\u0435\u043d\u0441\u0438\u0432\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447, \u0442\u0430\u043a\u0438\u0445 \u043a\u0430\u043a \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0431\u043e\u043b\u044c\u0448\u043e\u0433\u043e \u043e\u0431\u044a\u0435\u043c\u0430 \u0434\u0430\u043d\u043d\u044b\u0445. \u041a\u0430\u0436\u0434\u044b\u0439 \u043f\u0440\u043e\u0446\u0435\u0441\u0441 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u043e\u0434\u043d\u043e\u0433\u043e URL-\u0430\u0434\u0440\u0435\u0441\u0430 \u043d\u0435\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e \u0434\u0440\u0443\u0433 \u043e\u0442 \u0434\u0440\u0443\u0433\u0430, \u0447\u0442\u043e \u043f\u043e\u0432\u044b\u0448\u0430\u0435\u0442 \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u044c \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f. \u0414\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0442\u0430\u043a\u0436\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 requests. Threading: \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0445 \u043f\u043e\u0442\u043e\u043a\u043e\u0432 \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446. \u041f\u043e\u0434\u0445\u043e\u0434 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u043c\u0438 \u043f\u043e\u0442\u043e\u043a\u0430\u043c\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0432 \u043f\u0440\u0435\u0434\u0435\u043b\u0430\u0445 \u043e\u0434\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430. \u041a\u0430\u0436\u0434\u044b\u0439 \u043f\u043e\u0442\u043e\u043a \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u043e\u0434\u043d\u043e\u0433\u043e URL-\u0430\u0434\u0440\u0435\u0441\u0430, \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u044f \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447. \u0414\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0442\u0430\u043a\u0436\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 requests. \u041e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432: Asyncio: \u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0435 \u043f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u043e - \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 I/O-\u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439, \u0447\u0442\u043e \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0438\u0437\u0431\u0435\u0436\u0430\u0442\u044c \u0431\u043b\u043e\u043a\u0438\u0440\u043e\u0432\u043a\u0438 \u043f\u043e\u0442\u043e\u043a\u043e\u0432 \u0432\u043e \u0432\u0440\u0435\u043c\u044f \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u044f \u043e\u0442\u0432\u0435\u0442\u0430 \u043e\u0442 \u0432\u0435\u0431-\u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u041e\u0434\u043d\u0430\u043a\u043e \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434 \u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0445 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a \u0438 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0433\u043e \u043a\u043e\u0434\u0430 \u0441 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u044c\u044e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f. Multiprocessing: \u042d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u0435\u043d \u043f\u0440\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0438 CPU-\u0438\u043d\u0442\u0435\u043d\u0441\u0438\u0432\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447, \u0442\u0430\u043a \u043a\u0430\u043a \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432, \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u043d\u0430 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u043c \u044f\u0434\u0440\u0435 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0440\u0430. \u0412 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0441\u043b\u0443\u0447\u0430\u044f\u0445 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0441\u043b\u043e\u0436\u043d\u043e \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u043e\u0431\u0449\u0438\u043c\u0438 \u0440\u0435\u0441\u0443\u0440\u0441\u0430\u043c\u0438 \u0438 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u043c\u0435\u0436\u0434\u0443 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430\u043c\u0438 \u0438\u0437-\u0437\u0430 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u043c\u0435\u0445\u0430\u043d\u0438\u0437\u043c\u043e\u0432 \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u0438. Threading: \u041f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u0434\u043b\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0437\u0430\u0434\u0430\u0447 \u0432 \u043f\u0440\u0435\u0434\u0435\u043b\u0430\u0445 \u043e\u0434\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430. \u041e\u0434\u043d\u0430\u043a\u043e \u0438\u0437-\u0437\u0430 GIL (Global Interpreter Lock) \u0432 Python \u043f\u043e\u0442\u043e\u043a\u0438 \u043d\u0435 \u043c\u043e\u0433\u0443\u0442 \u043f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c\u0441\u044f \u043d\u0430 \u043c\u043d\u043e\u0433\u043e\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0440\u043d\u044b\u0445 \u0441\u0438\u0441\u0442\u0435\u043c\u0430\u0445. \u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c. Asyncio: \u041e\u0431\u0449\u0435\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f: \u043f\u0440\u0438\u043c\u0435\u0440\u043d\u043e 2.51 \u0441\u0435\u043a\u0443\u043d\u0434\u044b. \u041f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u043e \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u0435\u043d \u0434\u043b\u044f I/O-\u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439, \u043f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043a \u0432\u0435\u0431-\u0441\u0435\u0440\u0432\u0435\u0440\u0430\u043c. \u0412\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442 \u0432\u0441\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e, \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u043c\u043d\u043e\u0433\u043e\u0437\u0430\u0434\u0430\u0447\u043d\u043e\u0441\u0442\u0438. Multiprocessing: \u041e\u0431\u0449\u0435\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f: \u043f\u0440\u0438\u043c\u0435\u0440\u043d\u043e 4.75 \u0441\u0435\u043a\u0443\u043d\u0434. \u042d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u0435\u043d \u0434\u043b\u044f CPU-\u0438\u043d\u0442\u0435\u043d\u0441\u0438\u0432\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447, \u0442\u0430\u043a\u0438\u0445 \u043a\u0430\u043a \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u043e\u0431\u044a\u0435\u043c\u043e\u0432 \u0434\u0430\u043d\u043d\u044b\u0445. \u0417\u0430 \u0441\u0447\u0435\u0442 \u0440\u0430\u0441\u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u0438\u0432\u0430\u043d\u0438\u044f \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432 \u0434\u043e\u0441\u0442\u0438\u0433\u0430\u0435\u0442\u0441\u044f \u0443\u0432\u0435\u043b\u0438\u0447\u0435\u043d\u0438\u0435 \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f, \u043d\u043e \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043e\u0431\u0449\u0438\u043c\u0438 \u0440\u0435\u0441\u0443\u0440\u0441\u0430\u043c\u0438 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0441\u043b\u043e\u0436\u043d\u044b\u043c. Threading: \u041e\u0431\u0449\u0435\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f: \u043f\u0440\u0438\u043c\u0435\u0440\u043d\u043e 2.64 \u0441\u0435\u043a\u0443\u043d\u0434\u044b. \u041f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u0434\u043b\u044f \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0437\u0430\u0434\u0430\u0447 \u0432 \u043f\u0440\u0435\u0434\u0435\u043b\u0430\u0445 \u043e\u0434\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430. \u0418\u043c\u0435\u0435\u0442 \u043f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0430 \u0438 \u043d\u0435\u0434\u043e\u0441\u0442\u0430\u0442\u043a\u0438 \u0438\u0437-\u0437\u0430 GIL, \u043d\u043e \u0432 \u0434\u0430\u043d\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u0435\u043d \u0434\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447 \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446. \u0412\u044b\u0432\u043e\u0434\u044b Asyncio \u0438 Multiprocessing \u043e\u043a\u0430\u0437\u0430\u043b\u0438\u0441\u044c \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u044b\u043c\u0438 \u0434\u043b\u044f \u0434\u0430\u043d\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438. Asyncio \u043f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u0434\u043b\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0445 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u0432\u0432\u043e\u0434\u0430-\u0432\u044b\u0432\u043e\u0434\u0430, \u0442\u043e\u0433\u0434\u0430 \u043a\u0430\u043a Multiprocessing \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u0435\u043d \u043f\u0440\u0438 \u0440\u0430\u0431\u043e\u0442\u0435 \u0441 CPU-\u0438\u043d\u0442\u0435\u043d\u0441\u0438\u0432\u043d\u044b\u043c\u0438 \u0437\u0430\u0434\u0430\u0447\u0430\u043c\u0438. Threading \u043f\u043e\u043a\u0430\u0437\u0430\u043b \u043f\u0440\u0438\u0435\u043c\u043b\u0435\u043c\u0443\u044e \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c, \u043d\u043e \u0438\u0437-\u0437\u0430 GIL \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043c\u0435\u043d\u0435\u0435 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u044b\u043c \u043d\u0430 \u043c\u043d\u043e\u0433\u043e\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0440\u043d\u044b\u0445 \u0441\u0438\u0441\u0442\u0435\u043c\u0430\u0445. \u0418\u0442\u043e\u0433\u043e\u0432\u0430\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430: \u0417\u0430\u0434\u0430\u043d\u0438\u0435 async process thread 1 0.04739975929260254 0.05212969779968262 0.04924564743041992 2 2.5093860626220703 4.75020694732666 2.6366302967071533","title":"Home"},{"location":"#1","text":"\u0418\u0437\u043c\u0435\u0440\u0435\u043d\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0434\u043b\u044f async, process \u0438 thread \u0432\u044b\u0433\u043b\u044f\u0434\u0438\u0442 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c: Async: 0.0474 \u0441\u0435\u043a\u0443\u043d\u0434\u044b Process: 0.05213 \u0441\u0435\u043a\u0443\u043d\u0434\u044b Thread: 0.0492 \u0441\u0435\u043a\u0443\u043d\u0434\u044b \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u043f\u0440\u0438\u0447\u0438\u043d\u044b \u0434\u043b\u044f \u0442\u0430\u043a\u0438\u0445 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432: GIL (Global Interpreter Lock): Python \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 GIL, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0440\u0435\u0434\u043e\u0442\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u043f\u043e\u0442\u043e\u043a\u043e\u0432 Python \u043a\u043e\u0434\u0430 \u0432 \u043e\u0434\u043d\u043e\u043c \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0435. \u042d\u0442\u043e \u043c\u043e\u0436\u0435\u0442 \u0441\u043d\u0438\u0437\u0438\u0442\u044c \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u044c \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u0442\u043e\u0447\u043d\u044b\u0445 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432 \u0432 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0441\u043b\u0443\u0447\u0430\u044f\u0445. \u041e\u0434\u043d\u0430\u043a\u043e \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434 \u043d\u0435 \u0441\u0442\u0440\u0430\u0434\u0430\u0435\u0442 \u043e\u0442 \u044d\u0442\u043e\u0433\u043e, \u0442\u0430\u043a \u043a\u0430\u043a \u043e\u043d \u043d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u043f\u043e\u0442\u043e\u043a\u0438 Python. \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432: \u041f\u043e\u0434\u0445\u043e\u0434 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c multiprocessing (process) \u0441\u043e\u0437\u0434\u0430\u0435\u0442 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u044b, \u0447\u0442\u043e \u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u0431\u043e\u043b\u044c\u0448\u0435 \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0438 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432. \u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0440\u0435\u0441\u0443\u0440\u0441\u0430\u043c\u0438: \u0412 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u0442\u043e\u0447\u043d\u043e\u043c \u043f\u043e\u0434\u0445\u043e\u0434\u0435 (thread) \u0441\u043e\u0437\u0434\u0430\u0435\u0442\u0441\u044f \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u0442\u043e\u043a\u043e\u0432, \u043d\u043e \u043e\u043d\u0438 \u0440\u0430\u0437\u0434\u0435\u043b\u044f\u044e\u0442 \u043e\u0434\u0438\u043d \u0438 \u0442\u043e\u0442 \u0436\u0435 \u0440\u0435\u0441\u0443\u0440\u0441 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430, \u0447\u0442\u043e \u043c\u043e\u0436\u0435\u0442 \u043f\u043e\u0432\u043b\u0435\u0447\u044c \u0437\u0430 \u0441\u043e\u0431\u043e\u0439 \u043c\u0435\u043d\u044c\u0448\u0438\u0435 \u043d\u0430\u043a\u043b\u0430\u0434\u043d\u044b\u0435 \u0440\u0430\u0441\u0445\u043e\u0434\u044b \u043f\u043e \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044e \u0441 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435\u043c \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432.","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1:"},{"location":"#2","text":"\u0414\u0430\u043b\u0435\u0435 \u0431\u0443\u0434\u0435\u0442 3 \u0441\u043a\u0440\u0438\u043f\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0442 \u0441\u043e\u0431\u043e\u0439 \u0441\u043a\u0440\u0438\u043f\u0442\u044b \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u043f\u0443\u0442\u0435\u0448\u0435\u0441\u0442\u0432\u0438\u044f\u0445 \u0441 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0441\u0430\u0439\u0442\u043e\u0432 \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445. \u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u043e\u0432 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u0447\u0435\u0442\u044b\u0440\u0435 \u0440\u0430\u0437\u043d\u044b\u0445 URL-\u0430\u0434\u0440\u0435\u0441\u0430, \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0442\u0443\u0440\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u043c\u0435\u0440\u043e\u043f\u0440\u0438\u044f\u0442\u0438\u044f\u0445. async.py: import asyncio import aiohttp from bs4 import BeautifulSoup from sqlalchemy import create_engine, Column, Integer, String, DateTime, JSON from sqlalchemy.orm import sessionmaker from database import Trip, SessionLocal import time from datetime import datetime import re import json async def parse_and_save(url): start_time = time.time() async with aiohttp.ClientSession() as session: async with session.get(url) as response: html = await response.text() soup = BeautifulSoup(html, \"html.parser\") title = soup.title.string departure_location_element = soup.find(\"div\", class_=\"tags\") departure_location = departure_location_element.find(\"a\", class_=\"tag has-icon-location\").text.strip() if departure_location_element else \"Unknown\" date_option = soup.select_one(\"option[selected='selected']\") if date_option: date_text = date_option.text.strip() if \" \u2014 \" in date_text and \" \" in date_text: start_day, end_month_year = date_text.split(\" \u2014 \", maxsplit=1) end_day, month_year = end_month_year.split(\" \", maxsplit=1) month_name, year = month_year.rsplit(maxsplit=1) months = { \"\u044f\u043d\u0432\u0430\u0440\u044f\": 1, \"\u0444\u0435\u0432\u0440\u0430\u043b\u044f\": 2, \"\u043c\u0430\u0440\u0442\u0430\": 3, \"\u0430\u043f\u0440\u0435\u043b\u044f\": 4, \"\u043c\u0430\u044f\": 5, \"\u0438\u044e\u043d\u044f\": 6, \"\u0438\u044e\u043b\u044f\": 7, \"\u0430\u0432\u0433\u0443\u0441\u0442\u0430\": 8, \"\u0441\u0435\u043d\u0442\u044f\u0431\u0440\u044f\": 9, \"\u043e\u043a\u0442\u044f\u0431\u0440\u044f\": 10, \"\u043d\u043e\u044f\": 11, \"\u0434\u0435\u043a\": 12 } month = months.get(month_name.lower()) start_date_str = f\"{start_day} \u2014 {month} {year}\" end_date_str = f\"{end_day} {month} {year}\" start_date = datetime.strptime(start_date_str, \"%d \u2014 %m %Y\") end_date = datetime.strptime(end_date_str, \"%d %m %Y\") else: print(\"Date format not as expected.\") start_date, end_date = None, None else: start_date, end_date = None, None duration_element = soup.select_one(\"p.heading:-soup-contains('\u0414\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c') + p.title i.icon-duration\") duration_text = duration_element.find_next_sibling(string=True).strip() if duration_element else None duration = int(duration_text) if duration_text and duration_text.isdigit() else None details_block = soup.find(\"div\", class_=\"block mt-6\") details = details_block.find(\"div\").text.strip() if details_block else None print(f\"Title of {url}: {title}\") # \u041f\u0430\u0440\u0441\u0438\u043d\u0433 \u043f\u043e \u0441\u043b\u043e\u0432\u0430\u043c word_count = {} if details: words = re.findall(r'\\w+', details.lower()) for word in words: if word in word_count: word_count[word] += 1 else: word_count[word] = 1 print(\"Word count:\", word_count) db = SessionLocal() db.add(Trip(title=title, departure_location=departure_location, start_date=start_date, end_date=end_date, duration=duration, details=json.dumps(word_count))) # \u0421\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u043c \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 JSON db.commit() db.close() end_time = time.time() execution_time = end_time - start_time print(f\"Execution time for {url}: {execution_time} seconds\") async def main(): urls = [ \"https://turclub-pik.ru/pohod/yaponiya-v-sezon-cveteniya-sakury/\", \"https://www.trip.com/travel-guide/attraction/tokyo/warner-bros-studio-tour-tokyo-the-making-of-harry-potter-136452473/?locale=en-XX&curr=USD\", \"https://turclub-pik.ru/pohod/elbrus-s-yuga-s-komfortom-s-otelem/#trip-4253\", ] tasks = [] for url in urls: task = parse_and_save(url) tasks.append(task) await asyncio.gather(*tasks) if __name__ == \"__main__\": start_time = time.time() asyncio.run(main()) end_time = time.time() total_execution_time = end_time - start_time print(f\"\u041e\u0431\u0449\u0435\u0435 \u0432\u0440\u0435\u043c\u044f: {total_execution_time} \u0441\u0435\u043a\u0443\u043d\u0434\") process.py: import multiprocessing import requests from bs4 import BeautifulSoup from sqlalchemy import create_engine, Column, Integer, String, DateTime, JSON from sqlalchemy.orm import sessionmaker from database import Trip, SessionLocal import time from datetime import datetime import re import json def parse_and_save(url): start_time = time.time() response = requests.get(url) soup = BeautifulSoup(response.content, \"html.parser\") title = soup.title.string departure_location_element = soup.find(\"div\", class_=\"tags\") departure_location = departure_location_element.find(\"a\", class_=\"tag has-icon-location\").text.strip() if departure_location_element else \"Unknown\" date_option = soup.select_one(\"option[selected='selected']\") if date_option: date_text = date_option.text.strip() if \" \u2014 \" in date_text and \" \" in date_text: start_day, end_month_year = date_text.split(\" \u2014 \", maxsplit=1) end_day, month_year = end_month_year.split(\" \", maxsplit=1) month_name, year = month_year.rsplit(maxsplit=1) months = { \"\u044f\u043d\u0432\u0430\u0440\u044f\": 1, \"\u0444\u0435\u0432\u0440\u0430\u043b\u044f\": 2, \"\u043c\u0430\u0440\u0442\u0430\": 3, \"\u0430\u043f\u0440\u0435\u043b\u044f\": 4, \"\u043c\u0430\u044f\": 5, \"\u0438\u044e\u043d\u044f\": 6, \"\u0438\u044e\u043b\u044f\": 7, \"\u0430\u0432\u0433\u0443\u0441\u0442\u0430\": 8, \"\u0441\u0435\u043d\u0442\u044f\u0431\u0440\u044f\": 9, \"\u043e\u043a\u0442\u044f\u0431\u0440\u044f\": 10, \"\u043d\u043e\u044f\u0431\u0440\u044f\": 11, \"\u0434\u0435\u043a\u0430\u0431\u0440\u044f\": 12 } month = months.get(month_name.lower()) start_date_str = f\"{start_day} \u2014 {month} {year}\" end_date_str = f\"{end_day} {month} {year}\" start_date = datetime.strptime(start_date_str, \"%d \u2014 %m %Y\") end_date = datetime.strptime(end_date_str, \"%d %m %Y\") else: print(\"Date format not as expected.\") start_date, end_date = None, None else: start_date, end_date = None, None duration_element = soup.select_one(\"p.heading:-soup-contains('\u0414\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c') + p.title i.icon-duration\") duration_text = duration_element.find_next_sibling(text=True).strip() if duration_element else None duration = int(duration_text) if duration_text and duration_text.isdigit() else None details_block = soup.find(\"div\", class_=\"block mt-6\") details = details_block.find(\"div\").text.strip() if details_block else None print(f\"Title of {url}: {title}\") # Parsing by words word_count = {} if details: words = re.findall(r'\\w+', details.lower()) for word in words: if word in word_count: word_count[word] += 1 else: word_count[word] = 1 print(\"Word count:\", word_count) db = SessionLocal() db.add(Trip(title=title, departure_location=departure_location, start_date=start_date, end_date=end_date, duration=duration, details=json.dumps(word_count))) # Saving in JSON format db.commit() db.close() end_time = time.time() execution_time = end_time - start_time print(f\"Execution time for {url}: {execution_time} seconds\") if name == \" main \": urls = [ \"https://turclub-pik.ru/pohod/yaponiya-v-sezon-cveteniya-sakury/\", \"https://www.trip.com/travel-guide/attraction/tokyo/warner-bros-studio-tour-tokyo-the-making-of-harry-potter-136452473/?locale=en-XX&curr=USD\", \"https://turclub-pik.ru/pohod/elbrus-s-yuga-s-komfortom-s-otelem/#trip-4253\", \"https://www.tsarvisit.com/ru/visit/zimnie-katanija-na-sobach-ih-uprjazhkah-s-posescheniem-fermy-i-tradicionnym-obedom-671\" ] start_time = time.time() processes = [] for url in urls: process = multiprocessing.Process(target=parse_and_save, args=(url,)) processes.append(process) process.start() for process in processes: process.join() end_time = time.time() total_execution_time = end_time - start_time print(f\"Total execution time: {total_execution_time} seconds\") thread.py: import json import re import threading import requests from bs4 import BeautifulSoup from sqlalchemy import create_engine, Column, Integer, String, DateTime from sqlalchemy.orm import sessionmaker from database import Trip, SessionLocal import time from datetime import datetime def parse_and_save(url): start_time = time.time() response = requests.get(url) soup = BeautifulSoup(response.content, \"html.parser\") title = soup.title.string departure_location_element = soup.find(\"div\", class_=\"tags\") if departure_location_element: departure_location_element = departure_location_element.find(\"a\", class_=\"tag has-icon-location\") departure_location = departure_location_element.text.strip() if departure_location_element else \"Unknown\" date_option = soup.select_one(\"option[selected='selected']\") if date_option: date_text = date_option.text.strip() if \" \u2014 \" in date_text and \" \" in date_text: start_day, end_month_year = date_text.split(\" \u2014 \", maxsplit=1) end_day, month_year = end_month_year.split(\" \", maxsplit=1) month_name, year = month_year.rsplit(maxsplit=1) months = { \"\u044f\u043d\u0432\u0430\u0440\u044f\": 1, \"\u0444\u0435\u0432\u0440\u0430\u043b\u044f\": 2, \"\u043c\u0430\u0440\u0442\u0430\": 3, \"\u0430\u043f\u0440\u0435\u043b\u044f\": 4, \"\u043c\u0430\u044f\": 5, \"\u0438\u044e\u043d\u044f\": 6, \"\u0438\u044e\u043b\u044f\": 7, \"\u0430\u0432\u0433\u0443\u0441\u0442\u0430\": 8, \"\u0441\u0435\u043d\u0442\u044f\u0431\u0440\u044f\": 9, \"\u043e\u043a\u0442\u044f\u0431\u0440\u044f\": 10, \"\u043d\u043e\u044f\u0431\u0440\u044f\": 11, \"\u0434\u0435\u043a\u0430\u0431\u0440\u044f\": 12 } month = months.get(month_name, None) if month: start_date_str = f\"{start_day} \u2014 {month} {year}\" end_date_str = f\"{end_day} {month} {year}\" start_date = datetime.strptime(start_date_str, \"%d \u2014 %m %Y\") end_date = datetime.strptime(end_date_str, \"%d %m %Y\") else: print(\"Invalid month name:\", month_name) start_date, end_date = None, None else: print(\"Date format not as expected.\") start_date, end_date = None, None else: start_date, end_date = None, None duration_element = soup.select_one(\"p.heading:-soup-contains('\u0414\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c') + p.title i.icon-duration\") duration_text = duration_element.find_next_sibling(text=True).strip() if duration_element else None duration = int(duration_text) if duration_text and duration_text.isdigit() else None details_block = soup.find(\"div\", class_=\"block mt-6\") details = details_block.find(\"div\").text.strip() if details_block else None print(f\"Title of {url}: {title}\") # Word count parsing word_count = {} if details: words = re.findall(r'\\w+', details.lower()) for word in words: if word in word_count: word_count[word] += 1 else: word_count[word] = 1 print(\"Word count:\", word_count) db = SessionLocal() db.add(Trip(title=title, departure_location=departure_location, start_date=start_date, end_date=end_date, duration=duration, details=json.dumps(word_count))) db.commit() db.close() end_time = time.time() execution_time = end_time - start_time print(f\"Execution time for {url}: {execution_time} seconds\") urls = [\"https://turclub-pik.ru/pohod/yaponiya-v-sezon-cveteniya-sakury/\", \"https://www.trip.com/travel-guide/attraction/tokyo/warner-bros-studio-tour-tokyo-the-making-of-harry-potter-136452473/?locale=en-XX&curr=USD\", \"https://turclub-pik.ru/pohod/elbrus-s-yuga-s-komfortom-s-otelem/#trip-4253\", \"https://www.tsarvisit.com/ru/visit/zimnie-katanija-na-sobach-ih-uprjazhkah-s-posescheniem-fermy-i-tradicionnym-obedom-671\" ] start_time = time.time() threads = [] for url in urls: thread = threading.Thread(target=parse_and_save, args=(url,)) threads.append(thread) thread.start() for thread in threads: thread.join() end_time = time.time() total_execution_time = end_time - start_time print(f\"Total execution time for all threads: {total_execution_time} seconds\") \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u044b: Asyncio: \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0433\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u043a \u0432\u0435\u0431-\u0441\u0430\u0439\u0442\u0430\u043c \u0438 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445. \u041f\u043e\u0434\u0445\u043e\u0434 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u0435\u043d \u043f\u0440\u0438 \u0440\u0430\u0431\u043e\u0442\u0435 \u0441 I/O-\u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f\u043c\u0438, \u0442\u0430\u043a\u0438\u043c\u0438 \u043a\u0430\u043a \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043a \u0432\u0435\u0431-\u0441\u0435\u0440\u0432\u0435\u0440\u0430\u043c, \u043a\u043e\u0433\u0434\u0430 \u0437\u0430\u0434\u0435\u0440\u0436\u043a\u0438 \u0432\u043e\u0437\u043d\u0438\u043a\u0430\u044e\u0442 \u0438\u0437-\u0437\u0430 \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u044f \u043e\u0442\u0432\u0435\u0442\u0430. \u0412 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u044e\u0442\u0441\u044f \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0437\u0430\u0434\u0430\u0447, \u0447\u0442\u043e \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0441\u044d\u043a\u043e\u043d\u043e\u043c\u0438\u0442\u044c \u0432\u0440\u0435\u043c\u044f. \u0414\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 aiohttp. Multiprocessing: \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u0440\u0430\u0441\u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u0438\u0432\u0430\u043d\u0438\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432. \u041f\u043e\u0434\u0445\u043e\u0434 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u0435\u043d \u043f\u0440\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0438 CPU-\u0438\u043d\u0442\u0435\u043d\u0441\u0438\u0432\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447, \u0442\u0430\u043a\u0438\u0445 \u043a\u0430\u043a \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0431\u043e\u043b\u044c\u0448\u043e\u0433\u043e \u043e\u0431\u044a\u0435\u043c\u0430 \u0434\u0430\u043d\u043d\u044b\u0445. \u041a\u0430\u0436\u0434\u044b\u0439 \u043f\u0440\u043e\u0446\u0435\u0441\u0441 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u043e\u0434\u043d\u043e\u0433\u043e URL-\u0430\u0434\u0440\u0435\u0441\u0430 \u043d\u0435\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e \u0434\u0440\u0443\u0433 \u043e\u0442 \u0434\u0440\u0443\u0433\u0430, \u0447\u0442\u043e \u043f\u043e\u0432\u044b\u0448\u0430\u0435\u0442 \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u044c \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f. \u0414\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0442\u0430\u043a\u0436\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 requests. Threading: \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0445 \u043f\u043e\u0442\u043e\u043a\u043e\u0432 \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446. \u041f\u043e\u0434\u0445\u043e\u0434 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u043c\u0438 \u043f\u043e\u0442\u043e\u043a\u0430\u043c\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0432 \u043f\u0440\u0435\u0434\u0435\u043b\u0430\u0445 \u043e\u0434\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430. \u041a\u0430\u0436\u0434\u044b\u0439 \u043f\u043e\u0442\u043e\u043a \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u043e\u0434\u043d\u043e\u0433\u043e URL-\u0430\u0434\u0440\u0435\u0441\u0430, \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u044f \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447. \u0414\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0442\u0430\u043a\u0436\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 requests. \u041e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432: Asyncio: \u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0435 \u043f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u043e - \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 I/O-\u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439, \u0447\u0442\u043e \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0438\u0437\u0431\u0435\u0436\u0430\u0442\u044c \u0431\u043b\u043e\u043a\u0438\u0440\u043e\u0432\u043a\u0438 \u043f\u043e\u0442\u043e\u043a\u043e\u0432 \u0432\u043e \u0432\u0440\u0435\u043c\u044f \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u044f \u043e\u0442\u0432\u0435\u0442\u0430 \u043e\u0442 \u0432\u0435\u0431-\u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u041e\u0434\u043d\u0430\u043a\u043e \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434 \u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0445 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a \u0438 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0433\u043e \u043a\u043e\u0434\u0430 \u0441 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u044c\u044e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f. Multiprocessing: \u042d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u0435\u043d \u043f\u0440\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0438 CPU-\u0438\u043d\u0442\u0435\u043d\u0441\u0438\u0432\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447, \u0442\u0430\u043a \u043a\u0430\u043a \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432, \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u043d\u0430 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u043c \u044f\u0434\u0440\u0435 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0440\u0430. \u0412 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0441\u043b\u0443\u0447\u0430\u044f\u0445 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0441\u043b\u043e\u0436\u043d\u043e \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u043e\u0431\u0449\u0438\u043c\u0438 \u0440\u0435\u0441\u0443\u0440\u0441\u0430\u043c\u0438 \u0438 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u043c\u0435\u0436\u0434\u0443 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430\u043c\u0438 \u0438\u0437-\u0437\u0430 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u043c\u0435\u0445\u0430\u043d\u0438\u0437\u043c\u043e\u0432 \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u0438. Threading: \u041f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u0434\u043b\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0437\u0430\u0434\u0430\u0447 \u0432 \u043f\u0440\u0435\u0434\u0435\u043b\u0430\u0445 \u043e\u0434\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430. \u041e\u0434\u043d\u0430\u043a\u043e \u0438\u0437-\u0437\u0430 GIL (Global Interpreter Lock) \u0432 Python \u043f\u043e\u0442\u043e\u043a\u0438 \u043d\u0435 \u043c\u043e\u0433\u0443\u0442 \u043f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c\u0441\u044f \u043d\u0430 \u043c\u043d\u043e\u0433\u043e\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0440\u043d\u044b\u0445 \u0441\u0438\u0441\u0442\u0435\u043c\u0430\u0445. \u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c. Asyncio: \u041e\u0431\u0449\u0435\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f: \u043f\u0440\u0438\u043c\u0435\u0440\u043d\u043e 2.51 \u0441\u0435\u043a\u0443\u043d\u0434\u044b. \u041f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u043e \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u0435\u043d \u0434\u043b\u044f I/O-\u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439, \u043f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043a \u0432\u0435\u0431-\u0441\u0435\u0440\u0432\u0435\u0440\u0430\u043c. \u0412\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442 \u0432\u0441\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e, \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u043c\u043d\u043e\u0433\u043e\u0437\u0430\u0434\u0430\u0447\u043d\u043e\u0441\u0442\u0438. Multiprocessing: \u041e\u0431\u0449\u0435\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f: \u043f\u0440\u0438\u043c\u0435\u0440\u043d\u043e 4.75 \u0441\u0435\u043a\u0443\u043d\u0434. \u042d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u0435\u043d \u0434\u043b\u044f CPU-\u0438\u043d\u0442\u0435\u043d\u0441\u0438\u0432\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447, \u0442\u0430\u043a\u0438\u0445 \u043a\u0430\u043a \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u043e\u0431\u044a\u0435\u043c\u043e\u0432 \u0434\u0430\u043d\u043d\u044b\u0445. \u0417\u0430 \u0441\u0447\u0435\u0442 \u0440\u0430\u0441\u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u0438\u0432\u0430\u043d\u0438\u044f \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432 \u0434\u043e\u0441\u0442\u0438\u0433\u0430\u0435\u0442\u0441\u044f \u0443\u0432\u0435\u043b\u0438\u0447\u0435\u043d\u0438\u0435 \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f, \u043d\u043e \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043e\u0431\u0449\u0438\u043c\u0438 \u0440\u0435\u0441\u0443\u0440\u0441\u0430\u043c\u0438 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0441\u043b\u043e\u0436\u043d\u044b\u043c. Threading: \u041e\u0431\u0449\u0435\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f: \u043f\u0440\u0438\u043c\u0435\u0440\u043d\u043e 2.64 \u0441\u0435\u043a\u0443\u043d\u0434\u044b. \u041f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u0434\u043b\u044f \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0437\u0430\u0434\u0430\u0447 \u0432 \u043f\u0440\u0435\u0434\u0435\u043b\u0430\u0445 \u043e\u0434\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430. \u0418\u043c\u0435\u0435\u0442 \u043f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0430 \u0438 \u043d\u0435\u0434\u043e\u0441\u0442\u0430\u0442\u043a\u0438 \u0438\u0437-\u0437\u0430 GIL, \u043d\u043e \u0432 \u0434\u0430\u043d\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u0435\u043d \u0434\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447 \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446. \u0412\u044b\u0432\u043e\u0434\u044b Asyncio \u0438 Multiprocessing \u043e\u043a\u0430\u0437\u0430\u043b\u0438\u0441\u044c \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u044b\u043c\u0438 \u0434\u043b\u044f \u0434\u0430\u043d\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438. Asyncio \u043f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u0434\u043b\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0445 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u0432\u0432\u043e\u0434\u0430-\u0432\u044b\u0432\u043e\u0434\u0430, \u0442\u043e\u0433\u0434\u0430 \u043a\u0430\u043a Multiprocessing \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u0435\u043d \u043f\u0440\u0438 \u0440\u0430\u0431\u043e\u0442\u0435 \u0441 CPU-\u0438\u043d\u0442\u0435\u043d\u0441\u0438\u0432\u043d\u044b\u043c\u0438 \u0437\u0430\u0434\u0430\u0447\u0430\u043c\u0438. Threading \u043f\u043e\u043a\u0430\u0437\u0430\u043b \u043f\u0440\u0438\u0435\u043c\u043b\u0435\u043c\u0443\u044e \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c, \u043d\u043e \u0438\u0437-\u0437\u0430 GIL \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043c\u0435\u043d\u0435\u0435 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u044b\u043c \u043d\u0430 \u043c\u043d\u043e\u0433\u043e\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0440\u043d\u044b\u0445 \u0441\u0438\u0441\u0442\u0435\u043c\u0430\u0445. \u0418\u0442\u043e\u0433\u043e\u0432\u0430\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430: \u0417\u0430\u0434\u0430\u043d\u0438\u0435 async process thread 1 0.04739975929260254 0.05212969779968262 0.04924564743041992 2 2.5093860626220703 4.75020694732666 2.6366302967071533","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2:"}]}